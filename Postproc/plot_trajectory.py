#user/bin/python3

########################################################################################################
# Note:                                                                                                #
# 1. This script will draw the motion trajectory graphs of all the atoms in your MD system.            #
# 2. Please run our 'MSD.py' script before running this script.                                        #
# 3. Verfy the 'POSCAR' and all the '.pos' files generated by 'MSD.py' script in the work directory.   #
#                                                                                                      #
########################################################################################################

import numpy as np
import os
import linecache
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

posx, posy, posz = [], [], []
system={}
path = './combination'
os.makedirs(path)
species = linecache.getline('POSCAR', 6).strip(' ').split()
num_species = linecache.getline('POSCAR', 7).strip(' ').split()

for i in range(len(species)):
    system[species[i]] = int(num_species[i])

choice1 = input('This system contains '+str(len(species))+' elements: '+str(species)+", do you want to draw all the elements or select some? if it is the former, please type 'yes'; if it is the latter, give me you selection which seperated by space, like 'ca mg Si':")
if choice1 == 'yes':
    selection = system
else:
    element = choice1.title().split()
    selection = {}
    for i in element:
        if i not in species:
            print("Sorry, the element you select is not in the system, please select it again !")
        else:
            selection[i] = system[i]

choice2 = input('Do you want to draw all the atoms of one element in one graph or draw all the atoms in the system (yes/no):')
if choice2 == 'yes':
    for atom in selection.keys():
        num = selection[atom]
        file_atom = atom+".pos"
        pos_all, pos_modify = [], []
        with open(file_atom) as file:
            for line in file:
                ll = line.strip(' ').split()
                pos_all.append([float(ll[1]), float(ll[2]),float(ll[3])])
        n = int(len(pos_all)/num)
        xmin = int(np.min(pos_all))-1
        xmax = int(np.max(pos_all))+1
        time = []
        for i in range(n):
            pos_modify.append(pos_all[i*num:(i+1)*num])
            time.append(i)
        array_pos = np.array(pos_modify)
        fig = plt.figure(figsize=(10,10), dpi=125)
        ax = Axes3D(fig)
        ax.set_xlim(xmin, xmax)
        ax.set_ylim(xmin, xmax)
        ax.set_zlim(xmin, xmax)
        ax.tick_params(labelsize=12)
        ax.set_xlabel('X', fontdict={'size':15, 'color':'black'})
        ax.set_ylabel('Y', fontdict={'size':15, 'color':'black'})
        ax.set_zlabel('Z', fontdict={'size':15, 'color':'black'})
        ax.set_title(atom, {'fontsize':20})
        for j in range(num):
            x, y, z = array_pos[:,j,0].tolist(), array_pos[:,j,1].tolist(), array_pos[:,j,2].tolist()
            ax.scatter(x, y, z, s=5, c=time, cmap=plt.cm.viridis_r, edgecolor='none')
        plt.savefig(path+'/'+atom+'.jpg', bbox_inches='tight')
        plt.close(fig)
elif choice2 == 'no':
    for atom in system.keys():
        num = system[atom]
        file_atom = atom+".pos"
        pos_all, pos_modify = [], []
        with open(file_atom) as file:
            for line in file:
                ll = line.strip(' ').split()
                pos_all.append([float(ll[1]), float(ll[2]),float(ll[3])])
        n = int(len(pos_all)/num)
        time = []
        for i in range(n):
            pos_modify.append(pos_all[i*num:(i+1)*num])
            time.append(i)
        array_pos = np.array(pos_modify)
        for j in range(num):
            x, y, z = array_pos[:,j,0], array_pos[:,j,1], array_pos[:,j,2]
            fig = plt.figure(figsize=(10,10), dpi=125)
            ax = Axes3D(fig)
            ax.scatter(x, y, z, s=10, c=time, cmap=plt.cm.winter_r, edgecolor='none')
            ax.set_xlabel('X', fontdict={'size':15, 'color':'black'})
            ax.set_ylabel('Y', fontdict={'size':15, 'color':'black'})
            ax.set_zlabel('Z', fontdict={'size':15, 'color':'black'})
            ax.set_title(atom+'_'+str(j), {'fontsize':20})
            plt.savefig(path+'/'+atom+'_'+str(j)+'.jpg', bbox_inches='tight')
            plt.close(fig)
else:
    print('Wrong selection, please select it again !')
    
